1) Write a function that walks the list of free memory blocks and prints a line with the address and length of each block.

We are using a pointer "curr" to point to the 1st block of the free memory space. Memlist is the header of the free space so we use the mnext value to point to the 1st free block. 

We then traverse through the entire free space and print the length and address of each free block. 

In Xinu, the free memory blocks will be coalesced so the first time when we run this program, we get a single large free block. 

2) Replace the low-level memory management functions with a set of functions that allocate
heap and stack memory permanently (i.e., without providing a mechanism to return storage
to a free list). How do the sizes of the new allocation routines compare to the sizes of
getstk and getmem?

We have defined our own getstk and getmem functions(getstk6, getmem6) which uses First Fit allocation. 
In getstk6, we are allocating the exact number of bytes required by the process. The system call getstk does the same functionality except it uses Last Fit allocation. So the sizes of the new allocation routine and getstk are same. 

In getmem6, we are allocating the first free block whose size is greater than or equal to number of bytes required by the process. So exact number of bytes is not returned in this case. So the size of the new allocation routine will be greater than getmem system call. 

We want to demonstrate here that if we allocate memory in this way, the process might take the entire free memory space and might not allow other processes to execute. Hence this is not a right approach. 
This can be overcome by using the same logic used in getstk6 to allocate the required number of blocks. 

3) Many embedded systems go through a prototype stage, in which the system is built on a
general platform, and a final stage, in which minimal hardware is designed for the system.
In terms of memory management, one question concerns the size of the stack needed by
each process. Modify the code to allow the system to measure the maximum stack space
used by a process and report the maximum stack size when the process exits.

We are allocating a stack for the newly created processes. We are updating the stack with a character ‘F’ till the “Overflow” condition is reached. After that, the system will overwrite the stack with whatever arguments the calling function uses. We’ll have the count of the initial number of characters that were placed in the stack and once the function call happens, we’ll have the remaining amount of characters from which we’ll calculate the amount of memory the stack has actually used to allocate the memory for arguments.

Tasks performed:
xsh_mem.c - Suhas Jagadish
xsh_memtest.c - Raghuveer Krishnamurthy
create.c - Suhas Jagadish
kill.c - Raghuveer Krishnamurthy
getstk6 - Suhas Jagadish
getmem6 - Raghuveer Krishnamurthy
memtest.h - Raghuveer Krishnamurthy


